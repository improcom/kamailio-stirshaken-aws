AWSTemplateFormatVersion: 2010-09-09

Description: 'Covid2019-automated-dialer-template. Ubuntu 20.04 LTS'

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t1.micro
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    AllowedPattern: '.+'
  VPCID:
    Description: VPC
    Type: 'AWS::EC2::VPC::Id'
    ConstraintDescription: must be VPC.
    AllowedPattern: '.+'
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 72.89.122.10/32
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  # HTTPLocation:
  #   Description: The IP address range that can be used to access web interface. Use https://whatismyip.com to check your IP
  #   Type: String
  #   MinLength: '9'
  #   MaxLength: '18'
  #   Default: 0.0.0.0/0
  #   AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  #   ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  SIPSignallingLocation:
    Description: The IP address range that can be used for signalling SIP traffic.
    Type: String
    Default: 74.117.148.0/22
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  SIPSignallingLocation2:
    Description: The IP address range that can be used for signalling SIP traffic.
    Type: String
    Default: 34.224.43.195/32
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  SIPTerminatingLocation:
    Description: The IP address range that can be used for signalling SIP traffic.
    Type: String
    Default: 64.2.142.93/32
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/32'
    ConstraintDescription: must be a valid IP address of terminating ISP of the form x.x.x.x/32.
  PublicIPAddress:
    Description: The IP address to assign on EC2.
    Type: String
    Default: 35.84.253.234
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})'
    ConstraintDescription: must be a valid IP address.
  TagName4EC2:
    Description: The IP address to assign on EC2.
    Type: String
    Default: kamailio-stir-shaken
    AllowedPattern: '.+'
    ConstraintDescription: must be an alfanumeric name. Will be used as Tag:Name and hostname
  RepoAddressKamailio:
    Description: Address of repository from where the source code should be downloaded. Leave it to default
    Type: String
    Default: https://github.com/olegromanchuk/kamailio-stirshaken-aws.git
  RepoAddressSecsipid:
    Description: TMP!!! Address of repository from where the source code of secsipidx should be downloaded. Leave it to default. Is needed until the transnexus part is merged into main repo.
    Type: String
    Default: github.com/olegromanchuk/secsipidx

  # DBName:
  #   Default: kamailiostirshaken
  #   Description: Covid2019
  #   Type: String
  #   MinLength: '1'
  #   MaxLength: '64'
  #   AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
  #   ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
  # DBUsername:
  #   NoEcho: 'true'
  #   Description: Username for database access
  #   Type: String
  #   MinLength: '1'
  #   MaxLength: '16'
  #   AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
  #   Default: dbadminUfgehd63
  #   ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: Password database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    Default: Neptune2984
    ConstraintDescription: must contain only alphanumeric characters.
  ProjectName:
    Description: Company name.
    Type: String
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: '[-a-zA-Z0-9]*'
    Default: 'kamailio-stirshaken'
    ConstraintDescription: must contain only alphanumeric characters.
  CertificateProviderURL:
    Description: URL of certificate provider API. https://api.ca.transnexus.com/certificates/request
    Type: String
    MinLength: '1'
    MaxLength: '255'
    Default: 'https://38155eda-a57e-430a-b8d1-9441e91180d3.mock.pstmn.io/certificates/request'
  CertificateAuthorityToken:
    Description: Certificate authority token
    Type: String
    MinLength: '1'
    MaxLength: '255'
    Default: 'mySecureTokenForGeneratingCertificate'
  PrivateKeyPath:
    Description: Path to ssh private key. Used to generate STIR/SHAKEN certificate.
    Type: String
    MinLength: '1'
    MaxLength: '255'
    Default: '/usr/local/kamailio-5.6.0/stirshakendata/ec256-private.pem'
  STIRSHAKENcaEmail:
    Description: Email for StirShaken certificate.
    Type: String
    Default: admin@examplecompany.com
  STIRSHAKENcaDomain:
    Description: Domain for StirShaken certificate.
    Type: String
    Default: examplecompany.com
  STIRSHAKENcaCountry:
    Description: Country for StirShaken certificate.
    Type: String
    Default: US
  STIRSHAKENcaProvince:
    Description: Province for StirShaken certificate.
    Type: String
    Default: NY
  STIRSHAKENcaLocality:
    Description: Locality for StirShaken certificate.
    Type: String
    Default: New-York
  STIRSHAKENcaOrganization:
    Description: Organization for StirShaken certificate.
    Type: String
    Default: Example Company INC
  STIRSHAKENcaOrgUnit:
    Description: Organization Unit for StirShaken certificate.
    Type: String
    Default: IT

Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: HVM64
    m1.medium:
      Arch: HVM64
    m1.large:
      Arch: HVM64
    m1.xlarge:
      Arch: HVM64
    m2.xlarge:
      Arch: HVM64
    m2.2xlarge:
      Arch: HVM64
    m2.4xlarge:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    c1.medium:
      Arch: HVM64
    c1.xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-09d56f8956ab235b3
    us-east-2:
      HVM64: ami-0aeb7c931a5a61206
    us-west-1:
      HVM64: ami-0dc5e9ff792ec08e3
    us-west-2:
      HVM64: ami-0ee8244746ec5d6d4

Resources:
  IAMRole4EC2:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: SESAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "SES:SendEmail"
                  - "SES:SendRawEmail"
                Resource:
                  - !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity:*"
  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: 
      # - MariaDB
      - InstanceAndDBSecurityGroup
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 10
            VolumeType: gp2
            DeleteOnTermination: true
      ImageId: !FindInMap
               - AWSRegionArch2AMI
               - !Ref 'AWS::Region'
               - !FindInMap
                 - AWSInstanceType2Arch
                 - !Ref InstanceType
                 - Arch
      SecurityGroupIds:
        - !GetAtt InstanceAndDBSecurityGroup.GroupId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref AssignRole
      Tags: 
          - Key: Name
            Value: !Ref TagName4EC2
          - Key: Project
            Value: !Ref ProjectName
          - Key: Environment
            Value: development
      Tenancy: default
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          echo "creating script for env variables"
          cat > /etc/profile.d/load_env.sh << 'EOF'
          export PROJECT_NAME=${ProjectName}
          export KAMAILIO_VERSION=5.6.0
          export CERTIFICATE_PROVIDER=TransNexus
          export CERTIFICATE_PROVIDER_URL=${CertificateProviderURL}
          export CERTIFICATE_AUTHORITY_TOKEN=${CertificateAuthorityToken}
          export PRIVATE_KEY_PATH_4_CSR=${PrivateKeyPath}
          export EMAIL_4_CSR=${STIRSHAKENcaEmail}
          export DOMAIN_4_CSR=${STIRSHAKENcaDomain}
          export COUNTRY_4_CSR=${STIRSHAKENcaCountry}
          export PROVINCE_4_CSR=${STIRSHAKENcaProvince}
          export LOCALITY_4_CSR=${STIRSHAKENcaLocality}
          export ORGANIZATION_4_CSR=${STIRSHAKENcaOrganization}
          export ORGUNIT_4_CSR=${STIRSHAKENcaOrgUnit}
          EOF
          chmod a+x /etc/profile.d/load_env.sh
          source /etc/profile.d/load_env.sh

          LOCAL_IPV4=`curl -s http://169.254.169.254/latest/meta-data/local-ipv4`
          PUBLIC_IPV4=${PublicIPAddress}

          echo "$(date) - Kamailio install started" > /var/log/${!PROJECT_NAME}_install.log
          hostname ${TagName4EC2}
          echo ${TagName4EC2} > /etc/hostname

          apt update
          apt-get install mysql-server -y

          apt-get install secsipidx libsecsipid-dev ngrep jq -y


          # echo "install kamailio from packages"
          # apt-get install kamailio* -y //TODO - install only necessary modules


          echo "installing dependencies for kamailio source code"
          apt-get install build-essential bison flex pkg-config libpcre3-dev libxml2-dev libcurl4-openssl-dev libssl-dev make libmysqlclient-dev gcc g++ -y
          cd /usr/local/src/

          echo "installing kamailio source code"
          git clone https://github.com/kamailio/kamailio.git
          cd kamailio
          git checkout ${!KAMAILIO_VERSION}


          cd /usr/local/src/
          echo "installing golang"
          wget https://go.dev/dl/go1.18.2.linux-amd64.tar.gz
          rm -rf /usr/local/go && tar -C /usr/local -xzf go1.18.2.linux-amd64.tar.gz
          export PATH=$PATH:/usr/local/go/bin
          export GOPATH=/root/go
          export HOME=/root  #we need it for go build.
          echo "export GOPATH=/root/go" >> /root/.bashrc
          
          echo "installing secsipid"
          GO111MODULE=off go get ${RepoAddressSecsipid}
          cd $GOPATH/src/${RepoAddressSecsipid}
          make
          make install
          cd csecsipid

          echo "generating c headers and modules for kamailio"
          make liba
          cp secsipid.h libsecsipid.h libsecsipid.a /usr/local/src/kamailio/src/modules/secsipid_proc/


          echo "making secsipid module for kamailio"
          cd /usr/local/src/kamailio/
          make cfg
          make PREFIX="/usr/local/kamailio-${!KAMAILIO_VERSION}" include_modules="db_mysql dialplan secsipid_proc secsipid auth_identity" cfg
          make all
          make install
          make install-systemd-debian

          # export path
          echo "PATH=$PATH:/usr/local/go/bin:/usr/local/kamailio-${!KAMAILIO_VERSION}/sbin" >> /root/.bashrc


          echo "Download kamailio cfg and updating template values"
          cd /usr/local/src/
          git clone ${RepoAddressKamailio} kamailio-stirshaken-aws
          cd kamailio-stirshaken-aws
          cp -prf kamailio_v${!KAMAILIO_VERSION}.cfg /usr/local/kamailio-${!KAMAILIO_VERSION}/etc/kamailio/kamailio.cfg
          cp -prf kamctlrc /usr/local/kamailio-${!KAMAILIO_VERSION}/etc/kamailio/kamctlrc

          echo "get vars from CF template"
          SIP_SIGNALLING_LOCATION1_IP=$( echo ${SIPSignallingLocation} | awk -F "/" '{print $1}' )
          SIP_SIGNALLING_LOCATION1_MASK=$( echo ${SIPSignallingLocation} | awk -F "/" '{print $2}' )
          
          SIP_SIGNALLING_LOCATION2_IP=$( echo ${SIPSignallingLocation2} | awk -F "/" '{print $1}' )
          SIP_SIGNALLING_LOCATION2_MASK=$( echo ${SIPSignallingLocation2} | awk -F "/" '{print $2}' )

          SIP_TERMINATING_LOCATION_IP=$( echo ${SIPTerminatingLocation} | awk -F "/" '{print $1}' )
          SIP_TERMINATING_LOCATION_MASK=$( echo ${SIPTerminatingLocation} | awk -F "/" '{print $2}' )


          echo "$(date) creating kamailio db"
          # echo "CREATE USER 'kamailio'@'localhost' IDENTIFIED BY '${DBPassword}';" | mysql
          # echo "GRANT ALL PRIVILEGES ON * . * TO 'kamailio'@'localhost';" | mysql
          # echo "FLUSH PRIVILEGES;" | mysql

          cd /usr/local/kamailio-${!KAMAILIO_VERSION}/etc/kamailio/
          perl -pi -e "s/# DBENGINE=MYSQL/DBENGINE=MYSQL/" kamctlrc
          perl -pi -e "s/# DBRWUSER=\"kamailio\"/DBRWUSER=\"kamailio\"/" kamctlrc
          perl -pi -e "s/# DBRWPW=\"kamailiorw\"/DBRWPW=\"${DBPassword}\"/" kamctlrc

          perl -pi -e "s/ISP_ADDRESS_TEMPLATE/${!SIP_TERMINATING_LOCATION_IP}/" kamailio.cfg
          perl -pi -e "s/PRIVATE_IP_TEMPLATE/${!LOCAL_IPV4}/" kamailio.cfg
          perl -pi -e "s/PUBLIC_IP_TEMPLATE/${!PUBLIC_IPV4}/" kamailio.cfg
          perl -pi -e "s/kamailio:kamailiorw/kamailio:${DBPassword}/" kamailio.cfg
          perl -pi -e "s/trydef DBURL/define DBURL/" kamailio.cfg


          echo "generating ssl keys for secsipidx"
          cd /usr/local/kamailio-${!KAMAILIO_VERSION}
          mkdir stirshakendata
          cd stirshakendata
          openssl ecparam -name prime256v1 -genkey -noout -out ec256-private.pem
          openssl ec -in ec256-private.pem -pubout -out ec256-public.pem

          echo "generating certificate request and getting certificate from CERTIFICATE PROVIDER"
          CERTIFICATE_URL=$( /usr/local/bin/secsipidx --getcertificate | jq -r '.certificate.certificate_url' )
          # if [[ ${!?} -ne 0 ]]; then
          #   echo "$(date) - Kamailio install started" > /var/log/${!PROJECT_NAME}_install.log
          # fi
          perl -pi -e "s/CERTIFICATE_URL_TEMPLATE/${!CERTIFICATE_URL}/" kamailio.cfg
          perl -pi -e "s/PRIVATE_KEY_PATH_TEMPLATE/${!PRIVATE_KEY_PATH_4_CSR}/" kamailio.cfg
          chown kamailio:kamailio *


          echo "configuring kamailio - post-install"
          echo "
          ascii
          n
          n
          n
          " | /usr/local/kamailio-${!KAMAILIO_VERSION}/sbin/kamdbctl create
          /usr/local/kamailio-${!KAMAILIO_VERSION}/sbin/kamctl address add 200 ${!SIP_SIGNALLING_LOCATION1_IP} ${!SIP_SIGNALLING_LOCATION1_MASK} 5060 "location1"
          /usr/local/kamailio-${!KAMAILIO_VERSION}/sbin/kamctl address add 200 ${!SIP_SIGNALLING_LOCATION2_IP} ${!SIP_SIGNALLING_LOCATION2_MASK} 5060 "location2"
          /usr/local/kamailio-${!KAMAILIO_VERSION}/sbin/kamctl address add 200 ${!SIP_TERMINATING_LOCATION_IP} 32 5060 "location2"

          
          systemctl enable kamailio
          systemctl start kamailio


        # - DBHost: !GetAtt MariaDB.Endpoint.Address
  
  AssignRole:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles: 
        - !Ref IAMRole4EC2

  InstanceAndDBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        # - IpProtocol: tcp
        #   FromPort: '80'
        #   ToPort: '80'
        #   CidrIp: !Ref HTTPLocation
        # - IpProtocol: tcp
        #   FromPort: '443'
        #   ToPort: '443'
        #   CidrIp: !Ref HTTPLocation
        - IpProtocol: udp
          FromPort: '5060'
          ToPort: '5060'
          CidrIp: !Ref SIPSignallingLocation
        - IpProtocol: udp
          FromPort: '5060'
          ToPort: '5060'
          CidrIp: !Ref SIPSignallingLocation2
        - IpProtocol: udp
          FromPort: '5060'
          ToPort: '5060'
          CidrIp: !Ref SIPTerminatingLocation

  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InstanceAndDBSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !GetAtt InstanceAndDBSecurityGroup.GroupId 
      
  IPAssoc:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      InstanceId: !Ref EC2Instance
      EIP: !Ref PublicIPAddress

  # MariaDB:
  #   Type: 'AWS::RDS::DBInstance'
  #   DependsOn: InstanceAndDBSecurityGroup
  #   Properties:
  #     DBInstanceIdentifier: kamailiostirshaken
  #     DBName: kamailiostirshakendatabase
  #     DBInstanceClass: db.t2.micro
  #     DBParameterGroupName: !Ref nDBParameterGroup
  #     VPCSecurityGroups: 
  #       - !GetAtt InstanceAndDBSecurityGroup.GroupId
  #     AllocatedStorage: 20
  #     Engine: MariaDB
  #     EngineVersion: 10.5.13
  #     MasterUsername: !Ref DBUsername
  #     MasterUserPassword: !Ref DBPassword
  #     Tags: 
  #       - Key: project
  #         Value: !Ref ProjectName
    
  # nDBParameterGroup:
  #   Type: 'AWS::RDS::DBParameterGroup'
  #   Properties: 
  #     Description: 'Parameter Group w SUPER priv'
  #     Family: 'mariadb10.5'
  #     Parameters:
  #       log_bin_trust_function_creators: '1'
  #     Tags: 
  #       - Key: Project
  #         Value: !Ref ProjectName
  
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2Instance
  # DatabaseHost:
  #   Description: DatabaseHostUrl
  #   Value: !GetAtt MariaDB.Endpoint.Address